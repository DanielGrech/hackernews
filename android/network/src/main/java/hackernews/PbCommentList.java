// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: ./hackernews.proto
package hackernews;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;
import java.util.Collections;
import java.util.List;

import static com.squareup.wire.Message.Label.REPEATED;

public final class PbCommentList extends Message {
  private static final long serialVersionUID = 0L;

  public static final List<PbComment> DEFAULT_COMMENTS = Collections.emptyList();

  @ProtoField(tag = 1, label = REPEATED, messageType = PbComment.class)
  public final List<PbComment> comments;

  public PbCommentList(List<PbComment> comments) {
    this.comments = immutableCopyOf(comments);
  }

  private PbCommentList(Builder builder) {
    this(builder.comments);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof PbCommentList)) return false;
    return equals(comments, ((PbCommentList) other).comments);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    return result != 0 ? result : (hashCode = comments != null ? comments.hashCode() : 1);
  }

  public static final class Builder extends Message.Builder<PbCommentList> {

    public List<PbComment> comments;

    public Builder() {
    }

    public Builder(PbCommentList message) {
      super(message);
      if (message == null) return;
      this.comments = copyOf(message.comments);
    }

    public Builder comments(List<PbComment> comments) {
      this.comments = checkForNulls(comments);
      return this;
    }

    @Override
    public PbCommentList build() {
      return new PbCommentList(this);
    }
  }
}
