// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: ./hackernews.proto
package hackernews;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;
import java.util.Collections;
import java.util.List;

import static com.squareup.wire.Message.Datatype.BOOL;
import static com.squareup.wire.Message.Datatype.INT32;
import static com.squareup.wire.Message.Datatype.INT64;
import static com.squareup.wire.Message.Datatype.STRING;
import static com.squareup.wire.Message.Label.PACKED;
import static com.squareup.wire.Message.Label.REPEATED;
import static com.squareup.wire.Message.Label.REQUIRED;

public final class PbStory extends Message {
  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_ID = 0L;
  public static final String DEFAULT_AUTHOR = "";
  public static final Long DEFAULT_PARENT_ID = 0L;
  public static final List<Long> DEFAULT_COMMENT_IDS = Collections.emptyList();
  public static final Integer DEFAULT_SCORE = 0;
  public static final Long DEFAULT_TIME = 0L;
  public static final String DEFAULT_TITLE = "";
  public static final String DEFAULT_TEXT = "";
  public static final String DEFAULT_TYPE = "";
  public static final String DEFAULT_URL = "";
  public static final List<Long> DEFAULT_PARTS = Collections.emptyList();
  public static final Integer DEFAULT_COMMENT_COUNT = 0;
  public static final List<PbComment> DEFAULT_COMMENTS = Collections.emptyList();
  public static final Boolean DEFAULT_DELETED = false;
  public static final Boolean DEFAULT_DEAD = false;

  @ProtoField(tag = 1, type = INT64, label = REQUIRED)
  public final Long id;

  @ProtoField(tag = 2, type = STRING)
  public final String author;

  @ProtoField(tag = 3, type = INT64)
  public final Long parent_id;

  @ProtoField(tag = 4, type = INT64, label = PACKED)
  public final List<Long> comment_ids;

  @ProtoField(tag = 5, type = INT32)
  public final Integer score;

  @ProtoField(tag = 6, type = INT64, label = REQUIRED)
  public final Long time;

  @ProtoField(tag = 7, type = STRING)
  public final String title;

  @ProtoField(tag = 8, type = STRING)
  public final String text;

  @ProtoField(tag = 9, type = STRING, label = REQUIRED)
  public final String type;

  @ProtoField(tag = 10, type = STRING)
  public final String url;

  @ProtoField(tag = 11, type = INT64, label = PACKED)
  public final List<Long> parts;

  @ProtoField(tag = 12, type = INT32)
  public final Integer comment_count;

  @ProtoField(tag = 13, label = REPEATED, messageType = PbComment.class)
  public final List<PbComment> comments;

  @ProtoField(tag = 14, type = BOOL)
  public final Boolean deleted;

  @ProtoField(tag = 15, type = BOOL)
  public final Boolean dead;

  public PbStory(Long id, String author, Long parent_id, List<Long> comment_ids, Integer score, Long time, String title, String text, String type, String url, List<Long> parts, Integer comment_count, List<PbComment> comments, Boolean deleted, Boolean dead) {
    this.id = id;
    this.author = author;
    this.parent_id = parent_id;
    this.comment_ids = immutableCopyOf(comment_ids);
    this.score = score;
    this.time = time;
    this.title = title;
    this.text = text;
    this.type = type;
    this.url = url;
    this.parts = immutableCopyOf(parts);
    this.comment_count = comment_count;
    this.comments = immutableCopyOf(comments);
    this.deleted = deleted;
    this.dead = dead;
  }

  private PbStory(Builder builder) {
    this(builder.id, builder.author, builder.parent_id, builder.comment_ids, builder.score, builder.time, builder.title, builder.text, builder.type, builder.url, builder.parts, builder.comment_count, builder.comments, builder.deleted, builder.dead);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof PbStory)) return false;
    PbStory o = (PbStory) other;
    return equals(id, o.id)
        && equals(author, o.author)
        && equals(parent_id, o.parent_id)
        && equals(comment_ids, o.comment_ids)
        && equals(score, o.score)
        && equals(time, o.time)
        && equals(title, o.title)
        && equals(text, o.text)
        && equals(type, o.type)
        && equals(url, o.url)
        && equals(parts, o.parts)
        && equals(comment_count, o.comment_count)
        && equals(comments, o.comments)
        && equals(deleted, o.deleted)
        && equals(dead, o.dead);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = id != null ? id.hashCode() : 0;
      result = result * 37 + (author != null ? author.hashCode() : 0);
      result = result * 37 + (parent_id != null ? parent_id.hashCode() : 0);
      result = result * 37 + (comment_ids != null ? comment_ids.hashCode() : 1);
      result = result * 37 + (score != null ? score.hashCode() : 0);
      result = result * 37 + (time != null ? time.hashCode() : 0);
      result = result * 37 + (title != null ? title.hashCode() : 0);
      result = result * 37 + (text != null ? text.hashCode() : 0);
      result = result * 37 + (type != null ? type.hashCode() : 0);
      result = result * 37 + (url != null ? url.hashCode() : 0);
      result = result * 37 + (parts != null ? parts.hashCode() : 1);
      result = result * 37 + (comment_count != null ? comment_count.hashCode() : 0);
      result = result * 37 + (comments != null ? comments.hashCode() : 1);
      result = result * 37 + (deleted != null ? deleted.hashCode() : 0);
      result = result * 37 + (dead != null ? dead.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<PbStory> {

    public Long id;
    public String author;
    public Long parent_id;
    public List<Long> comment_ids;
    public Integer score;
    public Long time;
    public String title;
    public String text;
    public String type;
    public String url;
    public List<Long> parts;
    public Integer comment_count;
    public List<PbComment> comments;
    public Boolean deleted;
    public Boolean dead;

    public Builder() {
    }

    public Builder(PbStory message) {
      super(message);
      if (message == null) return;
      this.id = message.id;
      this.author = message.author;
      this.parent_id = message.parent_id;
      this.comment_ids = copyOf(message.comment_ids);
      this.score = message.score;
      this.time = message.time;
      this.title = message.title;
      this.text = message.text;
      this.type = message.type;
      this.url = message.url;
      this.parts = copyOf(message.parts);
      this.comment_count = message.comment_count;
      this.comments = copyOf(message.comments);
      this.deleted = message.deleted;
      this.dead = message.dead;
    }

    public Builder id(Long id) {
      this.id = id;
      return this;
    }

    public Builder author(String author) {
      this.author = author;
      return this;
    }

    public Builder parent_id(Long parent_id) {
      this.parent_id = parent_id;
      return this;
    }

    public Builder comment_ids(List<Long> comment_ids) {
      this.comment_ids = checkForNulls(comment_ids);
      return this;
    }

    public Builder score(Integer score) {
      this.score = score;
      return this;
    }

    public Builder time(Long time) {
      this.time = time;
      return this;
    }

    public Builder title(String title) {
      this.title = title;
      return this;
    }

    public Builder text(String text) {
      this.text = text;
      return this;
    }

    public Builder type(String type) {
      this.type = type;
      return this;
    }

    public Builder url(String url) {
      this.url = url;
      return this;
    }

    public Builder parts(List<Long> parts) {
      this.parts = checkForNulls(parts);
      return this;
    }

    public Builder comment_count(Integer comment_count) {
      this.comment_count = comment_count;
      return this;
    }

    public Builder comments(List<PbComment> comments) {
      this.comments = checkForNulls(comments);
      return this;
    }

    public Builder deleted(Boolean deleted) {
      this.deleted = deleted;
      return this;
    }

    public Builder dead(Boolean dead) {
      this.dead = dead;
      return this;
    }

    @Override
    public PbStory build() {
      checkRequiredFields();
      return new PbStory(this);
    }
  }
}
