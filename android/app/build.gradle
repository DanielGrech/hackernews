buildscript {
    repositories {
        jcenter()
        maven { url 'http://maven.fabric.io/public' }
    }
    dependencies {
        classpath 'org.jetbrains.kotlin:kotlin-android-extensions:0.14.449'
        classpath 'io.fabric.tools:gradle:1.20.0'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'io.fabric'
apply plugin: 'spoon'
apply plugin: 'icon-version'

apply from: '../buildscripts/utils.gradle'
apply from: '../buildscripts/jacoco.gradle'

android {
    compileSdkVersion config.compileSdkVersion
    buildToolsVersion config.buildToolsVersion

    signingConfigs {
        release {
            if (config.releaseSigning.storePassword != null) {
                storeFile file(config.releaseSigning.storeFile)
                storePassword config.releaseSigning.storePassword
                keyAlias config.releaseSigning.alias
                keyPassword config.releaseSigning.aliasPassword
            }
        }
    }

    defaultConfig {
        applicationId config.applicationId
        minSdkVersion config.minSdkVersion
        targetSdkVersion config.targetSdkVersion
        versionCode config.versionCode
        versionName config.versionName

        buildConfigField "String", "API_SERVER", "\"https://hacker-news.firebaseio.com/v0/\""
        buildConfigField "String", "BUILD_TIME", "\"${getBuildTime()}\""
        buildConfigField "String", "GIT_SHA", "\"${getGitSha()}\""
        buildConfigField "String", "BUILD_NUMBER", "\"${getCiBuildNumber()}\""
        buildConfigField "boolean", "LEAK_CANARY_ENABLED", "${!isCiBuild()}"
        buildConfigField "long", "STORY_LIST_NETWORK_CACHE_TIME", "${1000L * 60L * 10L}"
        buildConfigField "String", "GA_TRACKING_ID", "\"UA-36903330-5\""
        buildConfigField "String", "SUPPORT_EMAIL", "\"dgsoftwaredevelopment@gmail.com\""

        manifestPlaceholders = [
                // Want QA's to get a crash free build, but devs on their local machine
                // should focus on being as efficient as possible
                "useLargeHeap" : "${isCiBuild()}",
        ]
    }

    buildTypes {

        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix "-${getCiBuildNumber()}"

            resValue "string", "app_name", "${config.appName} Debug"
        }

        jacocoEnabled.initWith(buildTypes.debug)
        jacocoEnabled {
            applicationIdSuffix ".debug.jacoco"
            versionNameSuffix "-jacoco-${getCiBuildNumber()}"
            testCoverageEnabled true

            resValue "string", "app_name", "${config.appName} Debug (Jacoco)"
        }

        release {
            minifyEnabled true
            shrinkResources true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            resValue "string", "app_name", "${config.appName}"
        }
    }

    productFlavors {
        dev {
            buildConfigField "String", "API_SERVER", "\"http://10.80.4.19:8080/\""

            resValue "string", "app_name", "${config.appName} dev"
        }

        prod {
            buildConfigField "String", "API_SERVER", "\"http://hackernews-1082.appspot.com/\""
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    testOptions {
        unitTests.returnDefaultValues = true
        unitTests.all {
            jvmArgs = ['-XX:MaxPermSize=2048m']
        }
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'LICENSE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'NOTICE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }

    if (isCiBuild()) {
        applicationVariants.all { variant ->
            variant.outputs.each { output ->
                def existingFile = output.outputFile

                def variantName = "${variant.flavorName}-${variant.buildType.name.toLowerCase()}"
                def gitBranchName = "${gitBranchName()}"
                def appName = config.appName.toLowerCase().replaceAll(" ", "_")

                def newName = "${appName}-${variantName}-${gitBranchName}-${config.versionCode}-${System.getenv("BUILD_NUMBER")}.apk"
                output.outputFile = new File(existingFile.parent, newName)
            }
        }
    }

    applicationVariants.matching { it.buildType.name == 'jacocoEnabled' }.all { createJacocoTask(it) }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile project(":model")
    compile project(':network')
    compile project(':data')
    compile "org.jetbrains.anko:anko-sdk${config.targetSdkVersion}:${versions.anko}"
    compile "com.android.support:support-v4:${versions.androidSupport}"
    compile "com.android.support:appcompat-v7:${versions.androidSupport}"
    compile "com.android.support:recyclerview-v7:${versions.androidSupport}"
    compile "com.android.support:design:${versions.androidSupport}"
    compile "com.android.support:cardview-v7:${versions.androidSupport}"
    compile "com.android.support:customtabs:${versions.androidSupport}"
    compile "com.google.dagger:dagger:${versions.dagger}"
    compile "com.jakewharton.timber:timber:${versions.timber}"
    compile "cat.ereza:customactivityoncrash:${versions.customActivityOnCrash}"
    compile "javax.annotation:jsr250-api:${versions.jsr250}"
    compile "com.facebook.stetho:stetho-timber:${versions.stetho}"
    compile "com.lacronicus:easydatastorelib:${versions.easyDataStore}"
    compile "de.psdev.licensesdialog:licensesdialog:${versions.licensesDialog}"
    compile("com.crashlytics.sdk.android:crashlytics:${versions.fabricClient}") {
        transitive = true;
    }

    compile "io.reactivex:rxandroid:${versions.rxAndroid}"
    compile "com.jakewharton.rxbinding:rxbinding-kotlin:${versions.rxBinding}"
    compile "com.trello:rxlifecycle:${versions.rxLifecycle}"

    debugCompile "com.squareup.leakcanary:leakcanary-android:${versions.leakCanary}"
    releaseCompile "com.squareup.leakcanary:leakcanary-android-no-op:${versions.leakCanary}"

    kapt "com.google.dagger:dagger-compiler:${versions.dagger}"

    testCompile "junit:junit:${versions.junit}"
    testCompile "org.robolectric:robolectric:${versions.robolectric}"
    testCompile "org.robolectric:shadows-support-v4:${versions.robolectric}"
    testCompile "org.mockito:mockito-core:${versions.mockito}"
    testCompile "org.assertj:assertj-core:${versions.assertJ}"
}

// Display more verbose information when running tests from CLI
tasks.withType(Test).whenTaskAdded { testTask ->
    testTask.maxParallelForks 4
    testTask.testLogging config.testOptions
}

spoon {
    debug = true
    noAnimations = !isCiBuild()
}